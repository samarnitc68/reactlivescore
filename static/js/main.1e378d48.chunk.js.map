{"version":3,"sources":["Component/Navbar.js","img/vs.png","Component/MyCard.js","api/Api.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","AppBar","postion","Toolbar","IconButton","color","Typography","variant","MyCard","match","useState","detail","setDetail","open","setOpen","handleClick","id","console","log","fetch","then","response","json","catch","error","getMatchDetail","data","handleOpen","handleClose","Card","style","margin","CardContent","Grid","container","justify","alignItems","spacing","item","width","src","im","alt","CardActions","Button","onClick","unique_id","marginLeft","Date","dateTimeGMT","toLocaleDateString","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","stat","fontStyle","fontWeight","matchStarted","score","DialogActions","autoFocus","App","matches","setMatches","useEffect","alert","className","marginTop","sm","map","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e378d48.chunk.js","sourcesContent":["import React from 'react'\r\nimport {AppBar, Toolbar,IconButton, Typography } from \"@material-ui/core\"\r\nimport MenuIcon from \"@material-ui/icons/Menu\"\r\nconst Navbar=()=> {\r\n    return (\r\n        <AppBar postion=\"static\">\r\n            <Toolbar>\r\n                <IconButton color=\"inherit\">\r\n                    <MenuIcon></MenuIcon>\r\n                </IconButton>\r\n                <Typography variant=\"h6\">Live Score</Typography>\r\n            </Toolbar>\r\n\r\n        </AppBar>\r\n    )\r\n\r\n};\r\nexport default Navbar;","export default __webpack_public_path__ + \"static/media/vs.7419083b.png\";","import React from 'react'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport im from '../img/vs.png'\r\nimport { getMatchDetail } from '../api/Api';\r\nimport {useState} from 'react';\r\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core';\r\nconst MyCard =({match})=>{\r\n    const [detail, setDetail]=useState({})\r\n    const [open,setOpen]=useState(false);\r\n\r\n    const handleClick =(id)=>{\r\n        \r\n        getMatchDetail(id).then((data)=>{console.log(\"MATCH DATA\",data)\r\n        setDetail(data);\r\n        handleOpen();\r\n    })\r\n        .catch((error)=>console.log(error));\r\n    }\r\n\r\n    const getMatchCard=()=>{\r\n        return (\r\n            <Card style={{margin:20}}>\r\n                <CardContent>\r\n                    \r\n                    <Grid container justify=\"center\" alignItems=\"center\" spacing={4} >\r\n                        <Grid item>\r\n                         <Typography variant=\"h5\" >{match[\"team-1\"]}</Typography>   \r\n                        </Grid>\r\n                        <Grid item>\r\n\r\n                       <img style={{width:85}} src={im} alt=\"not found\" />\r\n        \r\n\r\n                        </Grid>\r\n                        <Grid item>\r\n                           <Typography variant=\"h5\">{match[\"team-2\"]}</Typography> \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n                <CardActions>\r\n                 <Grid container justify=\"center\" >\r\n                     \r\n                 <Button onClick={()=>\r\n               { handleClick(match.unique_id);}} item variant=\"contained\" color=\"primary\">Show details</Button>\r\n                  <Button style={{marginLeft:5}} item variant=\"contained\" color=\"primary\">Start Time {new Date(match.dateTimeGMT).toLocaleDateString()}\r\n                  </Button> \r\n                     \r\n                     \r\n                     </Grid> \r\n                 \r\n                </CardActions>\r\n            </Card>\r\n        )\r\n    }\r\n    const handleClose=()=>{\r\n        setOpen(false);\r\n\r\n    }\r\n    const handleOpen=()=>{\r\n        setOpen(true);\r\n    }\r\n\r\n    const getDialog=()=>(\r\n       <Dialog open={open} onClose={handleClose}>\r\n           <DialogTitle id=\"alert-dialog-title\">{\"Match Detail...\"}</DialogTitle>\r\n           <DialogContent>\r\n              <DialogContentText id=\"alert-dialog-description\">\r\n                <Typography>{detail.stat}</Typography>\r\n                <Typography>\r\n                   Match<span style={{fontStyle:\"italic\",fontWeight:\"bold\"}}>\r\n                       {detail.matchStarted ? \"Started\":\"Still not Started\"}</span> \r\n                </Typography> \r\n                <Typography>\r\n                <span style={{fontStyle:\"italic\",fontWeight:\"bold\"}}>\r\n                    {detail.score}\r\n                    </span>\r\n\r\n                </Typography>   \r\n              </DialogContentText>\r\n           </DialogContent>\r\n           <DialogActions>\r\n             <Button onClick={handleClose} color=\"primary\" autoFocus>close</Button>  \r\n           </DialogActions>\r\n       </Dialog> \r\n    );\r\n\r\n    return (\r\n        <>\r\n        {getMatchCard()}\r\n       {getDialog()}\r\n        </>\r\n    )\r\n\r\n}\r\nexport default MyCard;","const API_KEY = \"ALmb5P7EFkU04YZF4y870X76q8i2\";\r\n\r\n//get all the matches[upcoming matches]\r\n\r\nexport const getMatches=()=>{\r\n    const url=\"https://cricapi.com/api/matches/?apikey=ALmb5P7EFkU04YZF4y870X76q8i2\";\r\n\r\n    return fetch(url)\r\n    .then((response)=>response.json())\r\n    .catch((error)=>console.log(\"ERROR :\",error));\r\n};\r\n\r\nexport const getMatchDetail = (id) =>{\r\n    console.log(\"you are in getmatchdetails\");\r\n    const url=\"https://cricapi.com/api/cricketScore/?apikey=ALmb5P7EFkU04YZF4y870X76q8i2&unique_id=\"+id;\r\n    return fetch(url).then((response)=>response.json()).catch((error)=>console.log(error));\r\n    \r\n};\r\n","import React, { useState ,Fragment } from 'react'\nimport './App.css';\nimport { Button, Grid, Typography } from \"@material-ui/core\"\nimport Navbar from './Component/Navbar';\nimport MyCard from './Component/MyCard';\nimport {getMatches} from './api/Api'\nimport { useEffect } from 'react';\nfunction App() {\n\n  const [matches, setMatches]=useState([])\n\n    useEffect(()=>{\n      getMatches().then((data)=>{\n        setMatches(data.matches)\n        console.log(data.matches);\n      }).catch((error)=>alert(\"could not load data\"));\n    },[]);\n\n  return (\n    <div className=\"App\">\n     <Navbar />\n      <Typography variant=\"h3\" style={{marginTop:\"60px\"}}>Welcome to my Live Score App</Typography>\n      <Grid container>\n      <Grid sm=\"2\">\n\n      </Grid>\n      <Grid sm=\"8\">\n      {\n        matches.map((match)=>(\n          <Fragment key={match.unique_id}>\n         {match.type==\"Twenty20\"?( <MyCard key={match.unique_id} match={match} />):(\"\")\n          }</Fragment>\n        ))\n        \n      }\n      </Grid>\n      </Grid>\n     \n     \n   </div>\n  ); \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}